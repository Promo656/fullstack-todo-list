[{"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/index.tsx":"1","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/App.tsx":"2","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/const/const.ts":"3","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/task/task.tsx":"4","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/path/boardsContainer.tsx":"5","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/boards/boards.tsx":"6","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/navbar/navbar.tsx":"7","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/boards/board/board.tsx":"8","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/redux/todoListReducer.ts":"9","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/redux/boardReducer.ts":"10","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/api/todoListApi.ts":"11","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/redux/taskReducer.ts":"12","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/todoLists/todoLists.tsx":"13","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/todoLists/todoList/todoList.tsx":"14","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/editableText/editableText.tsx":"15","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/path/todoListsContainer.tsx":"16","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/auth/signIn.tsx":"17","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/auth/signUp.tsx":"18"},{"size":468,"mtime":1616872445786,"results":"19","hashOfConfig":"20"},{"size":934,"mtime":1619036667715,"results":"21","hashOfConfig":"20"},{"size":295,"mtime":1617907572873,"results":"22","hashOfConfig":"20"},{"size":1662,"mtime":1618343235138,"results":"23","hashOfConfig":"20"},{"size":1262,"mtime":1618051418429,"results":"24","hashOfConfig":"20"},{"size":1187,"mtime":1617997386480,"results":"25","hashOfConfig":"20"},{"size":9054,"mtime":1619036642794,"results":"26","hashOfConfig":"20"},{"size":4244,"mtime":1618000972637,"results":"27","hashOfConfig":"20"},{"size":4354,"mtime":1618340307441,"results":"28","hashOfConfig":"20"},{"size":2514,"mtime":1618339962152,"results":"29","hashOfConfig":"20"},{"size":1681,"mtime":1618341572571,"results":"30","hashOfConfig":"20"},{"size":3598,"mtime":1618342334672,"results":"31","hashOfConfig":"20"},{"size":1829,"mtime":1618167239062,"results":"32","hashOfConfig":"20"},{"size":2984,"mtime":1618165822025,"results":"33","hashOfConfig":"20"},{"size":2432,"mtime":1619035453635,"results":"34","hashOfConfig":"20"},{"size":2318,"mtime":1618340695613,"results":"35","hashOfConfig":"20"},{"size":4012,"mtime":1619036743398,"results":"36","hashOfConfig":"20"},{"size":5268,"mtime":1619036803505,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1vzyo25",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/index.tsx",[],["82","83"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/App.tsx",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/const/const.ts",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/task/task.tsx",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/path/boardsContainer.tsx",["84"],"import React from 'react';\nimport Boards from \"../components/boards/boards\";\nimport {StateType} from \"../redux/store\";\nimport {connect} from \"react-redux\";\nimport {BoardType} from \"../types/boardType\";\nimport {addNewBoard, addNewBoardTC, deleteBoardTC, fetchBoardsTC, renameBoardTC} from \"../redux/boardReducer\";\n\ntype MSTP = {\n    boards: BoardType[]\n}\ntype MDTP = {\n    addNewBoardTC: (title: string) => void\n    fetchBoardsTC: () => void\n    deleteBoardTC: (boardId: string) => void\n    renameBoardTC: (boardId: string, newTitle: string) => void\n}\n\ntype BoardsContainerPropsType = MSTP & MDTP\n\nclass BoardsContainer extends React.Component<BoardsContainerPropsType> {\n\n    async componentDidMount() {\n        this.props.fetchBoardsTC()\n    }\n\n\n    render() {\n        return (\n            <Boards\n                boards={this.props.boards}\n                addNewBoardTC={this.props.addNewBoardTC}\n                deleteBoardTC={this.props.deleteBoardTC}\n                renameBoardTC={this.props.renameBoardTC}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = (state: StateType) => ({\n    boards: state.boards\n})\nexport default connect(mapStateToProps, {\n    addNewBoardTC,\n    fetchBoardsTC,\n    deleteBoardTC,\n    renameBoardTC\n})(BoardsContainer);",["85","86"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/boards/boards.tsx",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/navbar/navbar.tsx",["87","88"],"import React from 'react';\nimport {createStyles, fade, makeStyles, Theme} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputBase from '@material-ui/core/InputBase';\nimport Badge from '@material-ui/core/Badge';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MailIcon from '@material-ui/icons/Mail';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport {useHistory} from 'react-router-dom';\nimport {Button} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        grow: {\n            flexGrow: 1,\n            marginBottom: theme.spacing(1)\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        title: {\n            display: 'none',\n            [theme.breakpoints.up('sm')]: {\n                display: 'block',\n            },\n        },\n        search: {\n            position: 'relative',\n            borderRadius: theme.shape.borderRadius,\n            backgroundColor: fade(theme.palette.common.white, 0.15),\n            '&:hover': {\n                backgroundColor: fade(theme.palette.common.white, 0.25),\n            },\n            marginRight: theme.spacing(2),\n            marginLeft: 0,\n            width: '100%',\n            [theme.breakpoints.up('sm')]: {\n                marginLeft: theme.spacing(3),\n                width: 'auto',\n            },\n        },\n        searchIcon: {\n            padding: theme.spacing(0, 2),\n            height: '100%',\n            position: 'absolute',\n            pointerEvents: 'none',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        inputRoot: {\n            color: 'inherit',\n        },\n        inputInput: {\n            padding: theme.spacing(1, 1, 1, 0),\n            // vertical padding + font size from searchIcon\n            paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n            transition: theme.transitions.create('width'),\n            width: '100%',\n            [theme.breakpoints.up('md')]: {\n                width: '20ch',\n            },\n        },\n        sectionDesktop: {\n            display: 'none',\n            [theme.breakpoints.up('md')]: {\n                display: 'flex',\n            },\n        },\n        sectionMobile: {\n            display: 'flex',\n            [theme.breakpoints.up('md')]: {\n                display: 'none',\n            },\n        },\n        reButton: {\n            color: \"inherit\"\n        }\n    }),\n);\n\nexport default function Navbar() {\n    const history = useHistory()\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState<null | HTMLElement>(null);\n\n    const isMenuOpen = Boolean(anchorEl);\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n    const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMobileMenuClose = () => {\n        setMobileMoreAnchorEl(null);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        handleMobileMenuClose();\n    };\n\n    const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n        setMobileMoreAnchorEl(event.currentTarget);\n    };\n\n    const gotoBoards = () => {\n        history.push('/111/boards')\n    }\n    const gotoLogin = () => {\n        history.push('/auth/login')\n    }\n\n    const menuId = 'primary-search-account-menu';\n    const renderMenu = (\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n            id={menuId}\n            keepMounted\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\n            <MenuItem onClick={handleMenuClose}>My account</MenuItem>\n        </Menu>\n    );\n\n    const mobileMenuId = 'primary-search-account-menu-mobile';\n    const renderMobileMenu = (\n        <Menu\n            anchorEl={mobileMoreAnchorEl}\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n            id={mobileMenuId}\n            keepMounted\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\n            open={isMobileMenuOpen}\n            onClose={handleMobileMenuClose}\n        >\n            <MenuItem>\n                <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\n                    <Badge badgeContent={4} color=\"secondary\">\n                        <MailIcon/>\n                    </Badge>\n                </IconButton>\n                <p>Messages</p>\n            </MenuItem>\n            <MenuItem>\n                <IconButton aria-label=\"show 11 new notifications\" color=\"inherit\">\n                    <Badge badgeContent={11} color=\"secondary\">\n                        <NotificationsIcon/>\n                    </Badge>\n                </IconButton>\n                <p>Notifications</p>\n            </MenuItem>\n            <MenuItem onClick={handleProfileMenuOpen}>\n                <IconButton\n                    aria-label=\"account of current user\"\n                    aria-controls=\"primary-search-account-menu\"\n                    aria-haspopup=\"true\"\n                    color=\"inherit\"\n                >\n                    <AccountCircle/>\n                </IconButton>\n                <p>Profile</p>\n            </MenuItem>\n        </Menu>\n    );\n\n    return (\n        <div className={classes.grow}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        className={classes.menuButton}\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                    >\n                        <MenuIcon/>\n                    </IconButton>\n                    <IconButton classes={{root: classes.reButton}} onClick={gotoBoards}>\n                        <DashboardIcon/>\n                    </IconButton>\n                    {/* <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <SearchIcon/>\n                        </div>\n                        <InputBase\n                            placeholder=\"Search…\"\n                            classes={{\n                                root: classes.inputRoot,\n                                input: classes.inputInput,\n                            }}\n                            inputProps={{'aria-label': 'search'}}\n                        />\n                    </div>*/}\n                    <div className={classes.grow}/>\n                    <div className={classes.sectionDesktop}>\n                        <Button onClick={gotoLogin}>\n                            Auth\n                        </Button>\n                        <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\n                            <Badge badgeContent={4} color=\"secondary\">\n                                <MailIcon/>\n                            </Badge>\n                        </IconButton>\n                        <IconButton aria-label=\"show 17 new notifications\" color=\"inherit\">\n                            <Badge badgeContent={17} color=\"secondary\">\n                                <NotificationsIcon/>\n                            </Badge>\n                        </IconButton>\n                        <IconButton\n                            edge=\"end\"\n                            aria-label=\"account of current user\"\n                            aria-controls={menuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleProfileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            <AccountCircle/>\n                        </IconButton>\n                    </div>\n                    <div className={classes.sectionMobile}>\n                        <IconButton\n                            aria-label=\"show more\"\n                            aria-controls={mobileMenuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleMobileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            <MoreIcon/>\n                        </IconButton>\n                    </div>\n                </Toolbar>\n            </AppBar>\n            {renderMobileMenu}\n            {renderMenu}\n        </div>\n    );\n}\n","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/boards/board/board.tsx",["89","90"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/redux/todoListReducer.ts",[],["91","92"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/redux/boardReducer.ts",[],["93","94"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/api/todoListApi.ts",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/redux/taskReducer.ts",["95"],"import {TaskType} from \"../types/taskType\";\nimport {ADD_NEW_TASK, ADD_NEW_TODOLIST, CHANGE_TASK_TITLE, SET_TASKS} from \"../const/const\";\nimport {AddNewTodoListAT} from \"../types/todoListType\";\nimport {Dispatch} from \"redux\";\nimport {todoListsAPI} from \"../api/todoListApi\";\nimport {toast} from \"react-toastify\";\n\nexport type TaskThunkDispatch = Dispatch<TaskReducerAT>\n\ntype InitialStateTaskType = {\n    [key: string]: TaskType[]\n}\n\ntype TaskReducerAT =\n    AddNewTaskAT\n    | AddNewTodoListAT\n    | ChangeTaskTitleAT\n    | SetTasksAT\n\nlet initialState: InitialStateTaskType = {\n    /*  \"TodoList1\": [\n          {\n              _id: \"eded\",\n              date: \"12.12.12\",\n              title: \"New Task\",\n              todoListId: \"e3dee3d\",\n              __v: 0\n          }\n      ]*/\n}\n\n\nexport const tasks = (state: InitialStateTaskType = initialState, action: TaskReducerAT) => {\n    switch (action.type) {\n        case ADD_NEW_TASK:\n            return {\n                ...state,\n                [action.payload.todoListId]: [\n                    ...state[action.payload.todoListId],\n                    action.payload\n                ]\n            }\n        case CHANGE_TASK_TITLE:\n            return {\n                ...state,\n                [action.payload.todoListId]: state[action.payload.todoListId]\n                    .map(el =>\n                        el._id === action.payload.taskId\n                            ? {\n                                ...el,\n                                text: action.payload.newTaskTitle\n                            }\n                            : el\n                    )\n            }\n        case ADD_NEW_TODOLIST:\n            return {\n                ...state,\n                [action.payload._id]: []\n            }\n        case SET_TASKS:\n            const result = {} as InitialStateTaskType\n            action.payload.forEach(el => {\n                if (!result[el.todoListId]) {\n                    result[el.todoListId] = [el]\n                } else {\n                    result[el.todoListId].push(el)\n                }\n            })\n            return {\n                ...state,\n                ...result\n            }\n        default :\n            return state\n    }\n}\n\ntype AddNewTaskAT = {\n    type: typeof ADD_NEW_TASK,\n    payload: TaskType\n}\nexport const addNewTask = (task: TaskType): AddNewTaskAT => ({\n    type: ADD_NEW_TASK,\n    payload: task\n})\n\ntype ChangeTaskTitleAT = {\n    type: typeof CHANGE_TASK_TITLE,\n    payload: { todoListId: string, taskId: string, newTaskTitle: string }\n}\nexport const renameTask = (todoListId: string, taskId: string, newTaskTitle: string): ChangeTaskTitleAT => ({\n    type: CHANGE_TASK_TITLE,\n    payload: {todoListId, taskId, newTaskTitle}\n})\n\nexport type SetTasksAT = {\n    type: typeof SET_TASKS,\n    payload: TaskType[]\n}\n\nexport const setTasks = (tasks: TaskType[]): SetTasksAT => ({\n    type: SET_TASKS,\n    payload: tasks\n})\n\nexport const fetchTaskTC = () => async (dispatch: TaskThunkDispatch) => {\n    const response = await todoListsAPI.getTasks()\n    dispatch(setTasks(response.data))\n}\n\nexport const addNewTaskTC = (boardId: string, todoListId: string, title: string) => async (dispatch: TaskThunkDispatch) => {\n    const response = await todoListsAPI.addNewTask(boardId, todoListId, title)\n    dispatch(addNewTask(response.data))\n}\n\nexport const renameTaskTC = (todoListId: string, taskId: string, newTaskTitle: string) => async (dispatch: TaskThunkDispatch) => {\n    await todoListsAPI.renameTask(taskId, newTaskTitle)\n    dispatch(renameTask(todoListId, taskId, newTaskTitle))\n}",["96","97"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/todoLists/todoLists.tsx",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/todoLists/todoList/todoList.tsx",["98","99","100"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/editableText/editableText.tsx",["101"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/path/todoListsContainer.tsx",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/auth/signIn.tsx",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/auth/signUp.tsx",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":6,"column":9,"nodeType":"108","messageId":"109","endLine":6,"endColumn":20},{"ruleId":"102","replacedBy":"110"},{"ruleId":"104","replacedBy":"111"},{"ruleId":"106","severity":1,"message":"112","line":6,"column":8,"nodeType":"108","messageId":"109","endLine":6,"endColumn":17},{"ruleId":"106","severity":1,"message":"113","line":11,"column":8,"nodeType":"108","messageId":"109","endLine":11,"endColumn":18},{"ruleId":"106","severity":1,"message":"114","line":1,"column":29,"nodeType":"108","messageId":"109","endLine":1,"endColumn":39},{"ruleId":"106","severity":1,"message":"115","line":10,"column":8,"nodeType":"108","messageId":"109","endLine":10,"endColumn":20},{"ruleId":"102","replacedBy":"116"},{"ruleId":"104","replacedBy":"117"},{"ruleId":"102","replacedBy":"118"},{"ruleId":"104","replacedBy":"119"},{"ruleId":"106","severity":1,"message":"120","line":6,"column":9,"nodeType":"108","messageId":"109","endLine":6,"endColumn":14},{"ruleId":"102","replacedBy":"121"},{"ruleId":"104","replacedBy":"122"},{"ruleId":"106","severity":1,"message":"123","line":4,"column":9,"nodeType":"108","messageId":"109","endLine":4,"endColumn":15},{"ruleId":"106","severity":1,"message":"124","line":5,"column":8,"nodeType":"108","messageId":"109","endLine":5,"endColumn":15},{"ruleId":"106","severity":1,"message":"125","line":7,"column":9,"nodeType":"108","messageId":"109","endLine":7,"endColumn":11},{"ruleId":"106","severity":1,"message":"126","line":2,"column":17,"nodeType":"108","messageId":"109","endLine":2,"endColumn":27},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"@typescript-eslint/no-unused-vars","'addNewBoard' is defined but never used.","Identifier","unusedVar",["127"],["128"],"'InputBase' is defined but never used.","'SearchIcon' is defined but never used.","'MouseEvent' is defined but never used.","'EditableText' is defined but never used.",["127"],["128"],["127"],["128"],"'toast' is defined but never used.",["127"],["128"],"'Button' is defined but never used.","'AddIcon' is defined but never used.","'v1' is defined but never used.","'IconButton' is defined but never used.","no-global-assign","no-unsafe-negation"]