[{"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/index.tsx":"1","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/App.tsx":"2","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/const/const.ts":"3","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/task/task.tsx":"4","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/path/boardsContainer.tsx":"5","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/boards/boards.tsx":"6","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/navbar/navbar.tsx":"7","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/boards/board/board.tsx":"8","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/redux/todoListReducer.ts":"9","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/redux/boardReducer.ts":"10","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/api/todoListApi.ts":"11","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/redux/taskReducer.ts":"12","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/todoLists/todoLists.tsx":"13","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/todoLists/todoList/todoList.tsx":"14","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/editableText/editableText.tsx":"15","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/path/todoListsContainer.tsx":"16","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/auth/signIn.tsx":"17","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/auth/signUp.tsx":"18"},{"size":468,"mtime":1616872445786,"results":"19","hashOfConfig":"20"},{"size":934,"mtime":1619036667715,"results":"21","hashOfConfig":"20"},{"size":295,"mtime":1617907572873,"results":"22","hashOfConfig":"20"},{"size":1662,"mtime":1618343235138,"results":"23","hashOfConfig":"20"},{"size":1262,"mtime":1618051418429,"results":"24","hashOfConfig":"20"},{"size":1187,"mtime":1617997386480,"results":"25","hashOfConfig":"20"},{"size":9054,"mtime":1619036642794,"results":"26","hashOfConfig":"20"},{"size":4244,"mtime":1618000972637,"results":"27","hashOfConfig":"20"},{"size":4354,"mtime":1618340307441,"results":"28","hashOfConfig":"20"},{"size":2514,"mtime":1618339962152,"results":"29","hashOfConfig":"20"},{"size":1681,"mtime":1618341572571,"results":"30","hashOfConfig":"20"},{"size":3598,"mtime":1618342334672,"results":"31","hashOfConfig":"20"},{"size":1829,"mtime":1618167239062,"results":"32","hashOfConfig":"20"},{"size":2984,"mtime":1618165822025,"results":"33","hashOfConfig":"20"},{"size":2432,"mtime":1619035453635,"results":"34","hashOfConfig":"20"},{"size":2318,"mtime":1618340695613,"results":"35","hashOfConfig":"20"},{"size":4012,"mtime":1619036743398,"results":"36","hashOfConfig":"20"},{"size":5268,"mtime":1619036803505,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1vzyo25",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/index.tsx",[],["80","81"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/App.tsx",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/const/const.ts",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/task/task.tsx",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/path/boardsContainer.tsx",["82"],"import React from 'react';\nimport Boards from \"../components/boards/boards\";\nimport {StateType} from \"../redux/store\";\nimport {connect} from \"react-redux\";\nimport {BoardType} from \"../types/boardType\";\nimport {addNewBoard, addNewBoardTC, deleteBoardTC, fetchBoardsTC, renameBoardTC} from \"../redux/boardReducer\";\n\ntype MSTP = {\n    boards: BoardType[]\n}\ntype MDTP = {\n    addNewBoardTC: (title: string) => void\n    fetchBoardsTC: () => void\n    deleteBoardTC: (boardId: string) => void\n    renameBoardTC: (boardId: string, newTitle: string) => void\n}\n\ntype BoardsContainerPropsType = MSTP & MDTP\n\nclass BoardsContainer extends React.Component<BoardsContainerPropsType> {\n\n    async componentDidMount() {\n        this.props.fetchBoardsTC()\n    }\n\n\n    render() {\n        return (\n            <Boards\n                boards={this.props.boards}\n                addNewBoardTC={this.props.addNewBoardTC}\n                deleteBoardTC={this.props.deleteBoardTC}\n                renameBoardTC={this.props.renameBoardTC}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = (state: StateType) => ({\n    boards: state.boards\n})\nexport default connect(mapStateToProps, {\n    addNewBoardTC,\n    fetchBoardsTC,\n    deleteBoardTC,\n    renameBoardTC\n})(BoardsContainer);","/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/boards/boards.tsx",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/navbar/navbar.tsx",["83","84"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/boards/board/board.tsx",["85","86"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/redux/todoListReducer.ts",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/redux/boardReducer.ts",[],["87","88"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/api/todoListApi.ts",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/redux/taskReducer.ts",["89"],"import {TaskType} from \"../types/taskType\";\nimport {ADD_NEW_TASK, ADD_NEW_TODOLIST, CHANGE_TASK_TITLE, SET_TASKS} from \"../const/const\";\nimport {AddNewTodoListAT} from \"../types/todoListType\";\nimport {Dispatch} from \"redux\";\nimport {todoListsAPI} from \"../api/todoListApi\";\nimport {toast} from \"react-toastify\";\n\nexport type TaskThunkDispatch = Dispatch<TaskReducerAT>\n\ntype InitialStateTaskType = {\n    [key: string]: TaskType[]\n}\n\ntype TaskReducerAT =\n    AddNewTaskAT\n    | AddNewTodoListAT\n    | ChangeTaskTitleAT\n    | SetTasksAT\n\nlet initialState: InitialStateTaskType = {\n    /*  \"TodoList1\": [\n          {\n              _id: \"eded\",\n              date: \"12.12.12\",\n              title: \"New Task\",\n              todoListId: \"e3dee3d\",\n              __v: 0\n          }\n      ]*/\n}\n\n\nexport const tasks = (state: InitialStateTaskType = initialState, action: TaskReducerAT) => {\n    switch (action.type) {\n        case ADD_NEW_TASK:\n            return {\n                ...state,\n                [action.payload.todoListId]: [\n                    ...state[action.payload.todoListId],\n                    action.payload\n                ]\n            }\n        case CHANGE_TASK_TITLE:\n            return {\n                ...state,\n                [action.payload.todoListId]: state[action.payload.todoListId]\n                    .map(el =>\n                        el._id === action.payload.taskId\n                            ? {\n                                ...el,\n                                text: action.payload.newTaskTitle\n                            }\n                            : el\n                    )\n            }\n        case ADD_NEW_TODOLIST:\n            return {\n                ...state,\n                [action.payload._id]: []\n            }\n        case SET_TASKS:\n            const result = {} as InitialStateTaskType\n            action.payload.forEach(el => {\n                if (!result[el.todoListId]) {\n                    result[el.todoListId] = [el]\n                } else {\n                    result[el.todoListId].push(el)\n                }\n            })\n            return {\n                ...state,\n                ...result\n            }\n        default :\n            return state\n    }\n}\n\ntype AddNewTaskAT = {\n    type: typeof ADD_NEW_TASK,\n    payload: TaskType\n}\nexport const addNewTask = (task: TaskType): AddNewTaskAT => ({\n    type: ADD_NEW_TASK,\n    payload: task\n})\n\ntype ChangeTaskTitleAT = {\n    type: typeof CHANGE_TASK_TITLE,\n    payload: { todoListId: string, taskId: string, newTaskTitle: string }\n}\nexport const renameTask = (todoListId: string, taskId: string, newTaskTitle: string): ChangeTaskTitleAT => ({\n    type: CHANGE_TASK_TITLE,\n    payload: {todoListId, taskId, newTaskTitle}\n})\n\nexport type SetTasksAT = {\n    type: typeof SET_TASKS,\n    payload: TaskType[]\n}\n\nexport const setTasks = (tasks: TaskType[]): SetTasksAT => ({\n    type: SET_TASKS,\n    payload: tasks\n})\n\nexport const fetchTaskTC = () => async (dispatch: TaskThunkDispatch) => {\n    const response = await todoListsAPI.getTasks()\n    dispatch(setTasks(response.data))\n}\n\nexport const addNewTaskTC = (boardId: string, todoListId: string, title: string) => async (dispatch: TaskThunkDispatch) => {\n    const response = await todoListsAPI.addNewTask(boardId, todoListId, title)\n    dispatch(addNewTask(response.data))\n}\n\nexport const renameTaskTC = (todoListId: string, taskId: string, newTaskTitle: string) => async (dispatch: TaskThunkDispatch) => {\n    await todoListsAPI.renameTask(taskId, newTaskTitle)\n    dispatch(renameTask(todoListId, taskId, newTaskTitle))\n}",["90","91"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/todoLists/todoLists.tsx",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/todoLists/todoList/todoList.tsx",["92","93","94"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/editableText/editableText.tsx",["95"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/path/todoListsContainer.tsx",[],["96","97"],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/auth/signIn.tsx",[],"/Users/egor/Desktop/projects/own/fullstack-todo-list/client/src/components/auth/signUp.tsx",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":6,"column":9,"nodeType":"104","messageId":"105","endLine":6,"endColumn":20},{"ruleId":"102","severity":1,"message":"106","line":6,"column":8,"nodeType":"104","messageId":"105","endLine":6,"endColumn":17},{"ruleId":"102","severity":1,"message":"107","line":11,"column":8,"nodeType":"104","messageId":"105","endLine":11,"endColumn":18},{"ruleId":"102","severity":1,"message":"108","line":1,"column":29,"nodeType":"104","messageId":"105","endLine":1,"endColumn":39},{"ruleId":"102","severity":1,"message":"109","line":10,"column":8,"nodeType":"104","messageId":"105","endLine":10,"endColumn":20},{"ruleId":"98","replacedBy":"110"},{"ruleId":"100","replacedBy":"111"},{"ruleId":"102","severity":1,"message":"112","line":6,"column":9,"nodeType":"104","messageId":"105","endLine":6,"endColumn":14},{"ruleId":"98","replacedBy":"113"},{"ruleId":"100","replacedBy":"114"},{"ruleId":"102","severity":1,"message":"115","line":4,"column":9,"nodeType":"104","messageId":"105","endLine":4,"endColumn":15},{"ruleId":"102","severity":1,"message":"116","line":5,"column":8,"nodeType":"104","messageId":"105","endLine":5,"endColumn":15},{"ruleId":"102","severity":1,"message":"117","line":7,"column":9,"nodeType":"104","messageId":"105","endLine":7,"endColumn":11},{"ruleId":"102","severity":1,"message":"118","line":2,"column":17,"nodeType":"104","messageId":"105","endLine":2,"endColumn":27},{"ruleId":"98","replacedBy":"119"},{"ruleId":"100","replacedBy":"120"},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"@typescript-eslint/no-unused-vars","'addNewBoard' is defined but never used.","Identifier","unusedVar","'InputBase' is defined but never used.","'SearchIcon' is defined but never used.","'MouseEvent' is defined but never used.","'EditableText' is defined but never used.",["121"],["122"],"'toast' is defined but never used.",["121"],["122"],"'Button' is defined but never used.","'AddIcon' is defined but never used.","'v1' is defined but never used.","'IconButton' is defined but never used.",["121"],["122"],"no-global-assign","no-unsafe-negation"]